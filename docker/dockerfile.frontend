# --- docker/dockerfile.frontend 파일 내 ---

# --- 빌드 스테이지 (Build Stage) ---
# 특정 버전을 사용하고 서술적인 스테이지 이름을 부여합니다.
FROM node:18-alpine AS builder

# 컨테이너 내부의 작업 디렉터리를 설정합니다.
WORKDIR /app

# ✅ 이 ARG는 cloudbuild.yaml의 --build-arg로 전달된 값을 받습니다.
ARG NEXT_PUBLIC_API_URL
# ✅ 이 ENV는 'npm run build' 프로세스가 변수를 사용할 수 있게 합니다.
ENV NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}

# ✅ 단순화된 COPY. 이제 컨텍스트가 'frontend' 디렉터리이므로,
# 'package.json'과 'package-lock.json'을 직접 복사합니다.
COPY package*.json ./

# ✅ 재현 가능한 빌드를 위해 package-lock.json을 사용하는 'npm ci'를 사용합니다.
# '--only=production'을 제거해야 한다는 메모[1]는 'next build'가
# 'typescript'와 같은 devDependencies를 필요로 하기 때문에 매우 중요합니다.
RUN npm ci

# ✅ 단순화된 COPY. 컨텍스트인 'frontend' 디렉터리의 나머지 모든 소스 코드를
# 컨테이너의 /app 디렉터리로 복사합니다.
COPY . .

# Next.js 빌드 프로세스를 실행합니다.
RUN npm run build

# --- 프로덕션 스테이지 (Production Stage) ---
# 더 작고 안전한 최종 이미지를 위해 깨끗한 베이스 이미지에서 시작합니다.
FROM node:18-alpine AS production

WORKDIR /app

# 보안 강화를 위해 non-root 사용자를 생성합니다.
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001
USER nextjs

# ✅ 'builder' 스테이지에서 필요한 빌드 결과물만 복사합니다.
# 이는 최종 이미지를 가볍게 유지하고 소스 코드나 개발 의존성을 포함하지 않도록 합니다.
COPY --from=builder --chown=nextjs:nodejs /app/.next ./.next
COPY --from=builder /app/public ./public
COPY --from=builder /app/package.json ./package.json

# 프로덕션 'node_modules'는 package.json에 명시된 프로덕션 의존성에
# 기반하여 설치합니다. 이는 node_modules를 통째로 복사하는 것보다 안정적입니다.
RUN npm ci --only=production

EXPOSE 3000

# 프로덕션 모드에서 Next.js 애플리케이션을 시작하는 명령어입니다.
CMD ["npm", "start"]